<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" path="CodeGenerated" #>
// <auto-generated/>
#nullable enable
using Rem.Core.Attributes;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Rem.Core.ComponentModel;
<#
	foreach (var (SegmentName, IndexName) in new[] { ("AccessSegment32", "int"), ("AccessSegment64", "long") })
	{
#>

/// <summary>
/// A segment of an access path, representing either a property indicated by a <see cref="string"/> name or a
/// zero-based index indicated by a <see cref="<#=IndexName#>"/> value.
/// </summary>
/// <remarks>
/// The default instance of this struct represents the zero index.
/// </remarks>
public readonly record struct <#=SegmentName#>
{
	/// <summary>
	/// Gets the value of the index this segment represents, or throws an
	/// <see cref="InvalidOperationException"/> if this segment represents a property.
	/// </summary>
	/// <exception cref="InvalidOperationException">
	/// Thrown if this segment represents a property.
	/// </exception>
	public <#=IndexName#> IndexValue
		=> IsIndex
			? _indexValue
			: throw new InvalidOperationException("Cannot access index value of property segment.");

	/// <summary>
	/// Gets whether or not this is an index segment.
	/// </summary>
	[MemberNotNullWhen(false, nameof(_propertyName), nameof(PropertyNameOrNull))]
	[MemberNotNullWhen(true, nameof(IndexValueOrNull))]
	public bool IsIndex => !IsProperty;

	/// <summary>
	/// Gets the name of the property this segment represents, or throws an
	/// <see cref="InvalidOperationException"/> if this segment represents an index.
	/// </summary>
	/// <exception cref="InvalidOperationException">
	/// Thrown if this segment represents an index.
	/// </exception>
	public string PropertyName
		=> IsProperty
			? _propertyName
			: throw new InvalidOperationException("Cannot access property name of index segment.");

	/// <summary>
	/// Gets whether or not this is a property segment.
	/// </summary>
	[MemberNotNullWhen(true, nameof(_propertyName), nameof(PropertyNameOrNull))]
	[MemberNotNullWhen(false, nameof(IndexValueOrNull))]
	public bool IsProperty { get; } // This will default to false, so this struct has no invalid default instances

	/// <summary>
	/// Gets the name of the property this segment represents, or <see langword="null"/> if this segment
	/// represents an index.
	/// </summary>
	public string? PropertyNameOrNull => _propertyName;

	/// <summary>
	/// Gets the value of the index this segment represents, or <see langword="null"/> if this segment represents
	/// a property.
	/// </summary>
	public <#=IndexName#>? IndexValueOrNull => IsProperty ? null : _indexValue;

	/// <summary>
	/// Gets the value of the index this segment represents, or zero if this segment represents a property.
	/// </summary>
	/// <remarks>
	/// If the segment represents a property, a (valid) index value of zero is returned.
	/// If an invalid index return value is desired when the index represents a property,
	/// use <see cref="IndexValueOrNull"/> instead.
	/// </remarks>
	public <#=IndexName#> IndexValueOrZero => _indexValue;

	private readonly string _propertyName;
	private readonly <#=IndexName#> _indexValue;

	/// <summary>
	/// Constructs a new instance of the <see cref="<#=SegmentName#>"/> struct representing the property with the name
	/// passed in.
	/// </summary>
	/// <param name="PropertyName">The name of the property to represent.</param>
	/// <exception cref="ArgumentNullException">
	/// <paramref name="PropertyName"/> was <see langword="null"/>.
	/// </exception>
	public <#=SegmentName#>(string PropertyName)
	{
		if (PropertyName is null) throw new ArgumentNullException(nameof(PropertyName));
		_propertyName = PropertyName;
		_indexValue = default;
		IsProperty = true;
	}

	/// <summary>
	/// Constructs a new instance of the <see cref="<#=SegmentName#>"/> struct representing the index with the value
	/// passed in.
	/// </summary>
	/// <param name="IndexValue">The value of the index to represent.</param>
	/// <exception cref="ArgumentOutOfRangeException"><paramref name="IndexValue"/> was negative.</exception>
	public <#=SegmentName#>([NonNegative] <#=IndexName#> IndexValue)
	{
		if (IndexValue < 0)
		{
			throw new ArgumentOutOfRangeException(nameof(IndexValue), IndexValue,
												  "IndexValue value cannot be negative.");
		}
		_indexValue = IndexValue;
		_propertyName = default!;
		IsProperty = false;
	}

	/// <inheritdoc cref="TryProperty(out string, out <#=IndexName#>)"/>
	public bool TryProperty([MaybeNullWhen(false)] out string PropertyName)
	{
		PropertyName = _propertyName;
		return IsProperty;
	}

	/// <summary>
	/// Attempts to get the <see cref="PropertyName"/> property in an <see langword="out"/> parameter, returning
	/// whether or not this is actually a property segment.
	/// </summary>
	/// <param name="PropertyName">
	/// An <see langword="out"/> parameter to set to the value of the <see cref="PropertyName"/> property.
	/// <para/>
	/// This will be set to <see langword="null"/> if this is an index segment (in which case the method will
	/// return <see langword="false"/>).
	/// </param>
	/// <param name="IndexValue">
	/// An <see langword="out"/> parameter to set to the value of the <see cref="IndexValue"/> property.
	/// <para/>
	/// This will be set to zero if this is a property segment (in which case the method will
	/// return <see langword="true"/>).
	/// </param>
	/// <returns>Whether or not this is a property segment.</returns>
	public bool TryProperty([MaybeNullWhen(false)] out string PropertyName, out <#=IndexName#> IndexValue)
	{
		PropertyName = _propertyName;
		IndexValue = _indexValue;
		return IsProperty;
	}

	/// <inheritdoc cref="TryIndex(out <#=IndexName#>, out string)"/>
	public bool TryIndex(out <#=IndexName#> IndexValue)
	{
		IndexValue = _indexValue;
		return IsIndex;
	}

	/// <summary>
	/// Attempts to get the <see cref="IndexValue"/> property in an <see langword="out"/> parameter, returning
	/// whether or not this is actually an index segment.
	/// </summary>
	/// <param name="IndexValue">
	/// An <see langword="out"/> parameter to set to the value of the <see cref="IndexValue"/> property.
	/// <para/>
	/// This will be set to zero if this is a property segment (in which case the method will
	/// return <see langword="false"/>).
	/// </param>
	/// <param name="PropertyName">
	/// An <see langword="out"/> parameter to set to the value of the <see cref="PropertyName"/> property.
	/// <para/>
	/// This will be set to <see langword="null"/> if this is an index segment (in which case the method will
	/// return <see langword="true"/>).
	/// </param>
	/// <returns>Whether or not this is an index segment.</returns>
	public bool TryIndex(out <#=IndexName#> IndexValue, [MaybeNullWhen(true)] out string PropertyName)
	{
		PropertyName = _propertyName;
		IndexValue = _indexValue;
		return IsIndex;
	}

	/// <summary>
	/// Gets a hash code for this segment.
	/// </summary>
	/// <returns></returns>
	public override int GetHashCode()
	{
		if (IsProperty) return HashCode.Combine(true, _propertyName);
		else return HashCode.Combine(false, _indexValue);
	}

	/// <summary>
	/// Determines if this segment equals another.
	/// </summary>
	/// <param name="other"></param>
	/// <returns></returns>
	public bool Equals(<#=SegmentName#> other)
	{
		if (IsProperty) return other.IsProperty && _propertyName == other._propertyName;
		else return other.IsIndex && _indexValue == other._indexValue;
	}

	/// <summary>
	/// Gets a string that represents this segment.
	/// </summary>
	/// <returns></returns>
	public override string ToString() => IsProperty
											? $"Property {{ Name = {_propertyName} }}"
											: $"Index {{ Value = {_indexValue} }}";

	/// <summary>
	/// Implicitly converts a <see cref="string"/> property name to a segment representing the property with
	/// that name.
	/// </summary>
	/// <param name="PropertyName">The property name to convert.</param>
	/// <exception cref="ArgumentNullException">
	/// <paramref name="PropertyName"/> was <see langword="null"/>.
	/// </exception>
	public static implicit operator <#=SegmentName#>(string PropertyName) => new(PropertyName);

	/// <summary>
	/// Implicitly converts a non-negative <see cref="<#=IndexName#>"/> index value to a segment representing the index
	/// with that value.
	/// </summary>
	/// <param name="IndexValue">The index value to convert.</param>
	/// <exception cref="ArgumentOutOfRangeException">
	/// <paramref name="IndexValue"/> was negative.
	/// </exception>
	public static implicit operator <#=SegmentName#>([NonNegative] <#=IndexName#> IndexValue) => new(IndexValue);
}
<#
	}
#>
